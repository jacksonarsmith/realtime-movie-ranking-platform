// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: movies.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (id, title, rank, peak_rank, release_year, duration, audience, rating, votes, image_src, image_alt, movie_url, created_at, updated_at) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) RETURNING id, title, rank, peak_rank, release_year, duration, audience, rating, votes, image_src, image_alt, movie_url, created_at, updated_at
`

type CreateMovieParams struct {
	ID          uuid.UUID
	Title       string
	Rank        int32
	PeakRank    int32
	ReleaseYear int32
	Duration    int32
	Audience    string
	Rating      float64
	Votes       int32
	ImageSrc    string
	ImageAlt    string
	MovieUrl    string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, createMovie,
		arg.ID,
		arg.Title,
		arg.Rank,
		arg.PeakRank,
		arg.ReleaseYear,
		arg.Duration,
		arg.Audience,
		arg.Rating,
		arg.Votes,
		arg.ImageSrc,
		arg.ImageAlt,
		arg.MovieUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Rank,
		&i.PeakRank,
		&i.ReleaseYear,
		&i.Duration,
		&i.Audience,
		&i.Rating,
		&i.Votes,
		&i.ImageSrc,
		&i.ImageAlt,
		&i.MovieUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
